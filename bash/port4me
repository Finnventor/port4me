#! /usr/bin/env bash
### port4me: Get the Same, Personal, Free TCP Port over and over
### 
### Usage:
###  port4me [options]
### 
### Options:  
###  --help              Display the full help page with examples
###  --version           Output version of this software
###  --debug             Output detailed debug information
###
###  --user=<string>     User name (default: $USER)
###  --tool=<string>     Name of software tool
###  --include=<ports>   Comma-separated list of ports to be included
###                      (default: 1024-65535)
###  --exclude=<ports>   Comma-separated list of ports to be excluded
###  --prepend=<ports>   Comma-separated list of ports to be checked first
###
###  --list=<n>          List the first 'n', non-excluded ports scanned
###
###  --test=<port>       Return 0 if port is available, otherwise 1
###
### Examples:
### port4me --version
###
### port4me
### port4me --tool=rstudio
###
### rserver --www-port "$(port4me --tool=rstudio)"
### jupyter notebook --port "$(port4me --tool=jupyter)"
###
### Version: 0.4.0-9000
### Copyright: Henrik Bengtsson (2022)
### License: ISC

this="${BASH_SOURCE%/}"
[[ -L "${this}" ]] && this=$(readlink "${this}")

## Import bash utility functions
incl="$(dirname "${this}")/incl"

# shellcheck source=incl/port4me.bash
source "${incl}/port4me.bash"


# -------------------------------------------------------------------------
# CLI utility functions
# -------------------------------------------------------------------------
function version {
    grep -E "^###[ ]*Version:[ ]*" "$0" | sed 's/###[ ]*Version:[ ]*//g'
}

function help {
    local what res

    what=$1
    res=$(grep "^###" "$0" | grep -vE '^(####|### whatis: )' | cut -b 5-)

    if [[ $what == "full" ]]; then
        res=$(echo "$res" | sed '/^---/d')
    else
        res=$(echo "$res" | sed '/^---/Q')
    fi

    printf "%s\\n" "${res[@]}"
}


# -------------------------------------------------------------------------
# Parse command-line options
# -------------------------------------------------------------------------
action=port
count=0
port=-1

parse_cli_args() {
    local key value
    
    while (($# > 0)); do
        ## Options (--flags):
        if [[ "$1" == "--help" ]]; then
            action=help
        elif [[ "$1" == "--version" ]]; then
            action=version
        elif [[ "$1" == "--debug" ]]; then
            PORT4ME_DEBUG=true
        ## Options (--key=value):
        elif [[ "$1" =~ ^--.*=.*$ ]]; then
            key=${1//--}
            key=${key//=*}
            value=${1//--[[:alpha:]]*=}
            if [[ -z ${value} ]]; then
                error "Option '--${key}' must not be empty"
            fi
            if [[ "${key}" == "user" ]]; then
                PORT4ME_USER=${value}
            elif [[ "${key}" == "tool" ]]; then
                PORT4ME_TOOL=${value}
            elif [[ "${key}" == "exclude" ]]; then
                PORT4ME_EXCLUDE=${value}
            elif [[ "${key}" == "include" ]]; then
                PORT4ME_INCLUDE=${value}
            elif [[ "${key}" == "prepend" ]]; then
                PORT4ME_PREPEND=${value}
            elif [[ "${key}" == "skip" ]]; then
                PORT4ME_SKIP=${value}
            elif [[ "${key}" == "list" ]]; then
                action="list"
                count=${value}
            elif [[ "${key}" == "test" ]]; then
                action="test"
                port=${value}
            else
                error "Unknown option: $1"
            fi
        else
            error "Unknown option: $1"
        fi
        shift
    done              
}

parse_cli_args "$@"


# -------------------------------------------------------------------------
# Main
# -------------------------------------------------------------------------
if [[ $action == "help" ]]; then
    help ""
elif [[ $action == "version" ]]; then
    version
elif [[ $action == "list" ]]; then
    PORT4ME_LIST=${count} port4me
elif [[ $action == "test" ]]; then
    p4m_can_port_be_opened "${port}" && exit 0 || exit 1
else
    port4me
fi    
